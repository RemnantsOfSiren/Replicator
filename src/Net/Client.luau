--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.15.6 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "REPLICATOR_BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
	value: any,
	next: Entry?,
}

type Queue = {
	head: Entry?,
	tail: Entry?,
}

type BufferSave = {
	Size: number,
	Cursor: number,
	Buffer: buffer,
	Instances: { Instance },
}

local function Read(Bytes: number)
	local Offset = RecieveCursor
	RecieveCursor += Bytes
	return Offset
end

local function Save(): BufferSave
	return {
		Size = SendSize,
		Cursor = SendCursor,
		Buffer = SendBuffer,
		Instances = SendInstances,
	}
end

local function Load(Save: BufferSave?)
	if Save then
		SendSize = Save.Size
		SendCursor = Save.Cursor
		SendOffset = Save.Cursor
		SendBuffer = Save.Buffer
		SendInstances = Save.Instances
		return
	end

	SendSize = 64
	SendCursor = 0
	SendOffset = 0
	SendBuffer = buffer.create(64)
	SendInstances = {}
end

local function Invoke()
	if Invocations == 255 then
		Invocations = 0
	end

	local Invocation = Invocations
	Invocations += 1
	return Invocation
end

local function Allocate(Bytes: number)
	local InUse = (SendCursor + Bytes)
	if InUse > SendSize then
		--> Avoid resizing the buffer for every write
		while InUse > SendSize do
			SendSize *= 1.5
		end

		local Buffer = buffer.create(SendSize)
		buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
		SendBuffer = Buffer
	end

	SendOffset = SendCursor
	SendCursor += Bytes

	return SendOffset
end

local function CreateQueue(): Queue
	return {
		head = nil,
		tail = nil,
	}
end

local function Pop(queue: Queue): any
	local head = queue.head
	if head == nil then
		return
	end

	queue.head = head.next
	return head.value
end

local function Push(queue: Queue, value: any)
	local entry: Entry = {
		value = value,
		next = nil,
	}

	if queue.tail ~= nil then
		queue.tail.next = entry
	end

	queue.tail = entry

	if queue.head == nil then
		queue.head = entry
	end
end

local Calls = table.create(256)

local Events: any = {
	Reliable = table.create(256),
	Unreliable = table.create(256),
}

local Queue: any = {
	Reliable = table.create(256),
	Unreliable = table.create(256),
}

Queue.Reliable[0] = table.create(256)
Queue.Reliable[1] = table.create(256)
Queue.Reliable[3] = table.create(256)
Queue.Reliable[4] = table.create(256)
Queue.Reliable[5] = table.create(256)
Queue.Reliable[6] = table.create(256)
Queue.Reliable[7] = table.create(256)
export type unknownArray = { [number]: any }
export type replica = {
	Id: string,
	Name: string,
	Tags: { [number]: any }?,
	Data: any?,
	Parent: string?,
	WriteLib: Instance?,
	IsParent: boolean?,
}
export type replicaChange = { Time: number, Path: { [number]: any }, Value: any? }
export type arrayOfChanges = { [number]: { Time: number, Path: { [number]: any }, Value: any? } }
local function ReadEVENT_createReplica(): {
	Id: string,
	Name: string,
	Tags: { [number]: any }?,
	Data: any?,
	Parent: string?,
	WriteLib: Instance?,
	IsParent: boolean?,
}
	-- Read BLOCK: 8 bytes
	local BLOCK_START = Read(8)
	local Value = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	Value.Id = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Length = buffer.readu16(RecieveBuffer, BLOCK_START + 2)
	Value.Name = buffer.readstring(RecieveBuffer, Read(Length), Length)
	if buffer.readu8(RecieveBuffer, BLOCK_START + 4) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Value.Tags = {}
		local Elements_2 = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		for _ = 1, Elements_2 do
			local OFFSET_0 = Read(1)
			local Key_2 = buffer.readu8(RecieveBuffer, OFFSET_0)
			RecieveInstanceCursor += 1
			local Element_2 = RecieveInstances[RecieveInstanceCursor]
			Value.Tags[Key_2] = Element_2
		end
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 5) == 1 then
		RecieveInstanceCursor += 1
		Value.Data = RecieveInstances[RecieveInstanceCursor]
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 6) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		Value.Parent = buffer.readstring(RecieveBuffer, Read(Length), Length)
	end
	RecieveInstanceCursor += 1
	if typeof(RecieveInstances[RecieveInstanceCursor]) == "Instance" then
		RecieveInstanceCursor -= 1
		RecieveInstanceCursor += 1
		Value.WriteLib = RecieveInstances[RecieveInstanceCursor]
		if typeof(Value.WriteLib) ~= "Instance" then
			error(`Expected an Instance, got {typeof(Value.WriteLib)} instead.`)
		end
		if not Value.WriteLib:IsA("Instance") then
			error(`Expected an Instance of type "Instance", got "{Value.WriteLib.ClassName}" instead.`)
		end
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 7) == 1 then
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		Value.IsParent = (buffer.readu8(RecieveBuffer, BLOCK_START + 0) == 1)
	end
	return Value
end

local function ReadEVENT_updateReplica(): {
	Id: string,
	Changes: { [number]: { Time: number, Path: { [number]: any }, Value: any? } },
}
	-- Read BLOCK: 4 bytes
	local BLOCK_START = Read(4)
	local Value = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	Value.Id = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Value.Changes = {}
	local Elements_1 = buffer.readu16(RecieveBuffer, BLOCK_START + 2)
	for _ = 1, Elements_1 do
		local OFFSET_0 = Read(1)
		local Key_1 = buffer.readu8(RecieveBuffer, OFFSET_0)
		local Element_1 = {} :: any
		local OFFSET_1 = Read(8)
		Element_1.Time = buffer.readf64(RecieveBuffer, OFFSET_1)
		Element_1.Path = {}
		local OFFSET_2 = Read(2)
		local Elements_2 = buffer.readu16(RecieveBuffer, OFFSET_2)
		for _ = 1, Elements_2 do
			local OFFSET_0 = Read(1)
			local Key_2 = buffer.readu8(RecieveBuffer, OFFSET_0)
			RecieveInstanceCursor += 1
			local Element_2 = RecieveInstances[RecieveInstanceCursor]
			Element_1.Path[Key_2] = Element_2
		end
		local OFFSET_3 = Read(1)
		if buffer.readu8(RecieveBuffer, OFFSET_3) == 1 then
			RecieveInstanceCursor += 1
			Element_1.Value = RecieveInstances[RecieveInstanceCursor]
		end
		Value.Changes[Key_1] = Element_1
	end
	return Value
end

local function WriteEVENT_fireServerEvent(Value: { Id: string, Args: { [number]: any } }): ()
	-- Allocate BLOCK: 5 bytes
	local BLOCK_START = Allocate(5)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 2)
	local Length = #Value.Id
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value.Id, Length)
	local Elements_1 = 0
	for Key_1, Element_1 in Value.Args do
		Elements_1 += 1
		local OFFSET_0 = Allocate(1)
		buffer.writeu8(SendBuffer, OFFSET_0, Key_1)
		table.insert(SendInstances, Element_1 or Null)
	end
	buffer.writeu16(SendBuffer, BLOCK_START + 3, Elements_1)
end

local function ReadEVENT_fireClientEvent(): { Id: string, Args: { [number]: any } }
	-- Read BLOCK: 4 bytes
	local BLOCK_START = Read(4)
	local Value = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	Value.Id = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Value.Args = {}
	local Elements_1 = buffer.readu16(RecieveBuffer, BLOCK_START + 2)
	for _ = 1, Elements_1 do
		local OFFSET_0 = Read(1)
		local Key_1 = buffer.readu8(RecieveBuffer, OFFSET_0)
		RecieveInstanceCursor += 1
		local Element_1 = RecieveInstances[RecieveInstanceCursor]
		Value.Args[Key_1] = Element_1
	end
	return Value
end

local function ReadEVENT_changeParent(): { Id: string, Parent: string? }
	-- Read BLOCK: 3 bytes
	local BLOCK_START = Read(3)
	local Value = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	Value.Id = buffer.readstring(RecieveBuffer, Read(Length), Length)
	if buffer.readu8(RecieveBuffer, BLOCK_START + 2) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		Value.Parent = buffer.readstring(RecieveBuffer, Read(Length), Length)
	end
	return Value
end

local function ReadEVENT_destroyReplica(): string
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value = buffer.readstring(RecieveBuffer, Read(Length), Length)
	return Value
end

local function ReadEVENT_replicaWrite(): { Id: string, Method: string, Args: { [number]: any }? }
	-- Read BLOCK: 5 bytes
	local BLOCK_START = Read(5)
	local Value = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	Value.Id = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Length = buffer.readu16(RecieveBuffer, BLOCK_START + 2)
	Value.Method = buffer.readstring(RecieveBuffer, Read(Length), Length)
	if buffer.readu8(RecieveBuffer, BLOCK_START + 4) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Value.Args = {}
		local Elements_2 = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		for _ = 1, Elements_2 do
			local OFFSET_0 = Read(1)
			local Key_2 = buffer.readu8(RecieveBuffer, OFFSET_0)
			RecieveInstanceCursor += 1
			local Element_2 = RecieveInstances[RecieveInstanceCursor]
			Value.Args[Key_2] = Element_2
		end
	end
	return Value
end

local function WriteFUNCTION_DATA_getInitialReplicas(Value: nil, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 2 bytes
	local BLOCK_START = Allocate(2)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 7)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
end

local function ReadFUNCTION_RETURN_getInitialReplicas(): {
	{
		Id: string,
		Name: string,
		Tags: { [number]: any }?,
		Data: any?,
		Parent: string?,
		WriteLib: Instance?,
		IsParent: boolean?,
	}
}
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Success = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Success ~= 1 then
		error("Server encountered an error.")
	end
	-- START ARRAY
	local Length = buffer.readu8(RecieveBuffer, BLOCK_START + 1)
	if Length < 0 then
		error(`Expected "Length" to be larger than 0, got {Length} instead.`)
	end
	if Length > 255 then
		error(`Expected "Length" to be smaller than 255, got {Length} instead.`)
	end
	local Value = table.create(Length)
	-- Read BLOCK: 8 bytes
	local ARRAY_START_1 = Read(8 * Length)
	for Index = 1, Length do
		local Item_1 = {} :: any
		-- Read 2
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 2
		Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET)
		Item_1.Id = buffer.readstring(RecieveBuffer, Read(Length), Length)
		-- Read 2
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 2
		Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET)
		Item_1.Name = buffer.readstring(RecieveBuffer, Read(Length), Length)
		-- Read 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		if buffer.readu8(RecieveBuffer, OPERATION_OFFSET) == 1 then
			-- Read BLOCK: 2 bytes
			local BLOCK_START = Read(2)
			Item_1.Tags = {}
			local Elements_3 = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
			for _ = 1, Elements_3 do
				local OFFSET_0 = Read(1)
				local Key_3 = buffer.readu8(RecieveBuffer, OFFSET_0)
				RecieveInstanceCursor += 1
				local Element_3 = RecieveInstances[RecieveInstanceCursor]
				Item_1.Tags[Key_3] = Element_3
			end
		end
		-- Read 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		if buffer.readu8(RecieveBuffer, OPERATION_OFFSET) == 1 then
			RecieveInstanceCursor += 1
			Item_1.Data = RecieveInstances[RecieveInstanceCursor]
		end
		-- Read 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		if buffer.readu8(RecieveBuffer, OPERATION_OFFSET) == 1 then
			-- Read BLOCK: 2 bytes
			local BLOCK_START = Read(2)
			Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
			Item_1.Parent = buffer.readstring(RecieveBuffer, Read(Length), Length)
		end
		RecieveInstanceCursor += 1
		if typeof(RecieveInstances[RecieveInstanceCursor]) == "Instance" then
			RecieveInstanceCursor -= 1
			RecieveInstanceCursor += 1
			Item_1.WriteLib = RecieveInstances[RecieveInstanceCursor]
			if typeof(Item_1.WriteLib) ~= "Instance" then
				error(`Expected an Instance, got {typeof(Item_1.WriteLib)} instead.`)
			end
			if not Item_1.WriteLib:IsA("Instance") then
				error(`Expected an Instance of type "Instance", got "{Item_1.WriteLib.ClassName}" instead.`)
			end
		end
		-- Read 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		if buffer.readu8(RecieveBuffer, OPERATION_OFFSET) == 1 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			Item_1.IsParent = (buffer.readu8(RecieveBuffer, BLOCK_START + 0) == 1)
		end
		table.insert(Value, Item_1)
	end
	-- END ARRAY
	return Value
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
		createReplica = {
			on = NOOP,
		},
		updateReplica = {
			on = NOOP,
		},
		fireServerEvent = {
			fire = NOOP,
		},
		fireClientEvent = {
			on = NOOP,
		},
		changeParent = {
			on = NOOP,
		},
		destroyReplica = {
			on = NOOP,
		},
		replicaWrite = {
			on = NOOP,
		},
		getInitialReplicas = {
			invoke = NOOP,
		},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
	error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent =
	ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
	if SendCursor <= 0 then
		return
	end

	local Buffer = buffer.create(SendCursor)
	buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
	Reliable:FireServer(Buffer, SendInstances)

	SendSize = 64
	SendCursor = 0
	SendOffset = 0
	SendBuffer = buffer.create(64)
	table.clear(SendInstances)
end
local Elapsed = 0
RunService.Heartbeat:Connect(function(DeltaTime: number)
	Elapsed += DeltaTime
	if Elapsed >= (1 / 61) then
		Elapsed -= (1 / 61)
		StepReplication()
	end
end)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: { Instance })
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while RecieveCursor < Size do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: {
				Id: string,
				Name: string,
				Tags: { [number]: any }?,
				Data: any?,
				Parent: string?,
				WriteLib: Instance?,
				IsParent: boolean?,
			} =
				ReadEVENT_createReplica()
			if Events.Reliable[0] ~= nil then
				Events.Reliable[0](Value)
			else
				if #Queue.Reliable[0] > 256 then
					warn(
						'[Blink]: Event queue of "createReplica" exceeded 256, did you forget to implement a listener?'
					)
				end
				table.insert(Queue.Reliable[0], { Value } :: { any })
			end
		elseif Index == 1 then
			local Value: { Id: string, Changes: { [number]: { Time: number, Path: { [number]: any }, Value: any? } } } =
				ReadEVENT_updateReplica()
			if Events.Reliable[1] ~= nil then
				Events.Reliable[1](Value)
			else
				if #Queue.Reliable[1] > 256 then
					warn(
						'[Blink]: Event queue of "updateReplica" exceeded 256, did you forget to implement a listener?'
					)
				end
				table.insert(Queue.Reliable[1], { Value } :: { any })
			end
		elseif Index == 3 then
			local Value: { Id: string, Args: { [number]: any } } = ReadEVENT_fireClientEvent()
			if Events.Reliable[3] ~= nil then
				Events.Reliable[3](Value)
			else
				if #Queue.Reliable[3] > 256 then
					warn(
						'[Blink]: Event queue of "fireClientEvent" exceeded 256, did you forget to implement a listener?'
					)
				end
				table.insert(Queue.Reliable[3], { Value } :: { any })
			end
		elseif Index == 4 then
			local Value: { Id: string, Parent: string? } = ReadEVENT_changeParent()
			if Events.Reliable[4] ~= nil then
				Events.Reliable[4](Value)
			else
				if #Queue.Reliable[4] > 256 then
					warn('[Blink]: Event queue of "changeParent" exceeded 256, did you forget to implement a listener?')
				end
				table.insert(Queue.Reliable[4], { Value } :: { any })
			end
		elseif Index == 5 then
			local Value: string = ReadEVENT_destroyReplica()
			if Events.Reliable[5] ~= nil then
				Events.Reliable[5](Value)
			else
				if #Queue.Reliable[5] > 256 then
					warn(
						'[Blink]: Event queue of "destroyReplica" exceeded 256, did you forget to implement a listener?'
					)
				end
				table.insert(Queue.Reliable[5], { Value } :: { any })
			end
		elseif Index == 6 then
			local Value: { Id: string, Method: string, Args: { [number]: any }? } = ReadEVENT_replicaWrite()
			if Events.Reliable[6] ~= nil then
				Events.Reliable[6](Value)
			else
				if #Queue.Reliable[6] > 256 then
					warn('[Blink]: Event queue of "replicaWrite" exceeded 256, did you forget to implement a listener?')
				end
				table.insert(Queue.Reliable[6], { Value } :: { any })
			end
		elseif Index == 7 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			if Calls[InvocationIdentifier] ~= nil then
				local Success, ReturnValue = pcall(function()
					return ReadFUNCTION_RETURN_getInitialReplicas()
				end)
				task.spawn(Calls[InvocationIdentifier], Success, ReturnValue)
				Calls[InvocationIdentifier] = nil
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: { Instance })
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while RecieveCursor < Size do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)

local Returns = table.freeze({
	stepReplication = StepReplication,

	createReplica = {
		on = function(Listener: (
			Value: {
				Id: string,
				Name: string,
				Tags: { [number]: any }?,
				Data: any?,
				Parent: string?,
				WriteLib: Instance?,
				IsParent: boolean?,
			}
		) -> ()): () -> ()
			Events.Reliable[0] = Listener
			for Index, Arguments in Queue.Reliable[0] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[0] = {}
			return function(): ()
				Events.Reliable[0] = nil
			end
		end,
	},
	updateReplica = {
		on = function(Listener: (
			Value: { Id: string, Changes: { [number]: { Time: number, Path: { [number]: any }, Value: any? } } }
		) -> ()): () -> ()
			Events.Reliable[1] = Listener
			for Index, Arguments in Queue.Reliable[1] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[1] = {}
			return function(): ()
				Events.Reliable[1] = nil
			end
		end,
	},
	fireServerEvent = {
		fire = function(Value: { Id: string, Args: { [number]: any } }): ()
			WriteEVENT_fireServerEvent(Value)
		end,
	},
	fireClientEvent = {
		on = function(Listener: (Value: { Id: string, Args: { [number]: any } }) -> ()): () -> ()
			Events.Reliable[3] = Listener
			for Index, Arguments in Queue.Reliable[3] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[3] = {}
			return function(): ()
				Events.Reliable[3] = nil
			end
		end,
	},
	changeParent = {
		on = function(Listener: (Value: { Id: string, Parent: string? }) -> ()): () -> ()
			Events.Reliable[4] = Listener
			for Index, Arguments in Queue.Reliable[4] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[4] = {}
			return function(): ()
				Events.Reliable[4] = nil
			end
		end,
	},
	destroyReplica = {
		on = function(Listener: (Value: string) -> ()): () -> ()
			Events.Reliable[5] = Listener
			for Index, Arguments in Queue.Reliable[5] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[5] = {}
			return function(): ()
				Events.Reliable[5] = nil
			end
		end,
	},
	replicaWrite = {
		on = function(Listener: (Value: { Id: string, Method: string, Args: { [number]: any }? }) -> ()): () -> ()
			Events.Reliable[6] = Listener
			for Index, Arguments in Queue.Reliable[6] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[6] = {}
			return function(): ()
				Events.Reliable[6] = nil
			end
		end,
	},
	getInitialReplicas = {
		invoke = function(Value: nil): {
			{
				Id: string,
				Name: string,
				Tags: { [number]: any }?,
				Data: any?,
				Parent: string?,
				WriteLib: Instance?,
				IsParent: boolean?,
			}
		}
			local InvocationIdentifier = Invoke()
			if Calls[InvocationIdentifier] ~= nil then
				Invocations -= 1
				error("More than 256 calls are awaiting a response, this packet has been dropped.")
			end
			WriteFUNCTION_DATA_getInitialReplicas(Value, InvocationIdentifier)
			Calls[InvocationIdentifier] = coroutine.running()
			local Success, ReturnValue: {
				{
					Id: string,
					Name: string,
					Tags: { [number]: any }?,
					Data: any?,
					Parent: string?,
					WriteLib: Instance?,
					IsParent: boolean?,
				}
			} =
				coroutine.yield()
			if Success ~= true then
				error('There was an exception while processing "getInitialReplicas".')
			end
			return ReturnValue
		end,
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL

[{"title":"Replicator","type":0,"sectionRef":"#","url":"/Replicator/api/Replicator","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Replicator","url":"/Replicator/api/Replicator#functions","content":" "},{"title":"ListenToNewReplica​","type":1,"pageTitle":"Replicator","url":"/Replicator/api/Replicator#ListenToNewReplica","content":"This item only works when running on the client. Client &lt;/&gt; Replicator.ListenToNewReplica( Name: string, Callback: (Replica: Replica) → nil ) → () → nil Listens to new replicas being created, and fires the callback with the new replica. returns a function that when called, disconnects the listener.  "},{"title":"NewReplica​","type":1,"pageTitle":"Replicator","url":"/Replicator/api/Replicator#NewReplica","content":"This item only works when running on the server. Server &lt;/&gt; Replicator.NewReplica(Config: { Name: string, Tags: {string}?, Data: {[any]: any}?, WriteLib: ModuleScript? , To: Types.ToOptions?, Parent: Replica]? }) → Replica  "},{"title":"ReplicatedTable","type":0,"sectionRef":"#","url":"/Replicator/api/ReplicatedTable","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ReplicatedTable","url":"/Replicator/api/ReplicatedTable#functions","content":" "},{"title":"Insert​","type":1,"pageTitle":"ReplicatedTable","url":"/Replicator/api/ReplicatedTable#Insert","content":"&lt;/&gt; ReplicatedTable:Insert( Index: number?, Value: any ) → nil If the table is an array, inserts a value into the array at the specified index or at the end of the array. If the table is a dictionary, this function call will not exist and may throw an error. local Replica = Replicator.NewReplica({ Name = &quot;Replica&quot;, Tags = { &quot;Test&quot; }, Data = { Array = { 1, 2, 3 }, } }) local Array = Replica.Data.Array Array:Insert(2, 10) Array:Insert(15) for Index, Value in Array:Get() do print(Value) end ---&gt; 1, 10, 2, 3, 15   "},{"title":"Remove​","type":1,"pageTitle":"ReplicatedTable","url":"/Replicator/api/ReplicatedTable#Remove","content":"&lt;/&gt; ReplicatedTable:Remove(Index: number) → nil If the table is an array, removes the value at the specified index. If the table is a dictionary, this function call will not exist and may throw an error. local Replica = Replicator.NewReplica({ Name = &quot;Replica&quot;, Tags = { &quot;Test&quot; }, Data = { Array = { 1, 2, 3 }, } }) local Array = Replica.Data.Array Array:Remove(2) for Index, Value in Array:Get() do print(Value) end ---&gt; 1, 3   "},{"title":"Get​","type":1,"pageTitle":"ReplicatedTable","url":"/Replicator/api/ReplicatedTable#Get","content":"&lt;/&gt; ReplicatedTable:Get() → any Returns a deep copy of the table. "},{"title":"Replica","type":0,"sectionRef":"#","url":"/Replicator/api/Replica","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Replica","url":"/Replicator/api/Replica#functions","content":" "},{"title":"OnClientEvent​","type":1,"pageTitle":"Replica","url":"/Replicator/api/Replica#OnClientEvent","content":"This item only works when running on the client. Client &lt;/&gt; Replica:OnClientEvent(Callback: (...any) → nil) → {Disconnect: () → nil} Listens for a client event, and fires the callback with the arguments passed.  "},{"title":"Write​","type":1,"pageTitle":"Replica","url":"/Replicator/api/Replica#Write","content":"This item only works when running on the server. Server &lt;/&gt; Replica:Write( Method: string, ...: any ) → any Uses the WriteLib to write data changes, and then replicates the write call to the client along with any information needed to replicate the call.  "},{"title":"GetChildren​","type":1,"pageTitle":"Replica","url":"/Replicator/api/Replica#GetChildren","content":"&lt;/&gt; Replica:GetChildren() → {[string]: Replica} Returns all children of the replica, if the replica is not a parent it will return an empty table.  "},{"title":"OnServerEvent​","type":1,"pageTitle":"Replica","url":"/Replicator/api/Replica#OnServerEvent","content":"This item only works when running on the server. Server &lt;/&gt; Replica:OnServerEvent(Callback: ( Player: Player , ...any ) → nil) → {Disconnect: () → nil} Connects a function to the server event, which will be fired when the client sends a request.  "},{"title":"Fire​","type":1,"pageTitle":"Replica","url":"/Replicator/api/Replica#Fire","content":"&lt;/&gt; Replica:Fire(...: any) → nil Sends a request to the client, sending the arguments to the client.  "},{"title":"SetParent​","type":1,"pageTitle":"Replica","url":"/Replicator/api/Replica#SetParent","content":"This item only works when running on the server. Server &lt;/&gt; Replica:SetParent(Parent: ServerReplica) → nil Sets the parent of the replica, and then replicates the change to the client.  "},{"title":"Destroy​","type":1,"pageTitle":"Replica","url":"/Replicator/api/Replica#Destroy","content":"This item only works when running on the server. Server &lt;/&gt; Replica:Destroy() → nil Destroys the replica and cleans up any tasks that were added to the cleaner. [Destroying] will be fired when the replica is destroyed. This should only ever be intentionally called from the Server.  "},{"title":"ListenToWrite​","type":1,"pageTitle":"Replica","url":"/Replicator/api/Replica#ListenToWrite","content":"&lt;/&gt; Replica:ListenToWrite( Method: string, Callback: (...any) → nil ) → RBXScriptConnection  Connects to the Write event and listens for a specific method to be called. When the method is called, the callback is fired with the arguments passed to the method.  "},{"title":"ListenToKeyRemoved​","type":1,"pageTitle":"Replica","url":"/Replicator/api/Replica#ListenToKeyRemoved","content":"&lt;/&gt; Replica:ListenToKeyRemoved( Path: {string | number} | string, Callback: (...any) → nil ) → RBXScriptConnection  Connects to the Change event and listens for a specific key to be removed. When the key is removed, the callback is fired with the key and the value of the key before it was removed.  "},{"title":"ListenToNewKey​","type":1,"pageTitle":"Replica","url":"/Replicator/api/Replica#ListenToNewKey","content":"&lt;/&gt; Replica:ListenToNewKey( Path: {string | number} | string, Callback: (...any) → nil ) → RBXScriptConnection  Connects to the Change event and listens for a new key to be added. When the key is added, the callback is fired with the key and the value of the key.  "},{"title":"ListenToChange​","type":1,"pageTitle":"Replica","url":"/Replicator/api/Replica#ListenToChange","content":"&lt;/&gt; Replica:ListenToChange( Path: {string | number} | string, Callback: (...any) → nil, SuppressOld: boolean? ) → RBXScriptConnection  Connects to the Change event and listens for a specific key to be changed. When the key is changed, the callback is fired with the new value and the old value.  "},{"title":"ListenToRaw​","type":1,"pageTitle":"Replica","url":"/Replicator/api/Replica#ListenToRaw","content":"&lt;/&gt; Replica:ListenToRaw(Callback: (...any) → nil) → RBXScriptConnection  Connects to the Change event and listens for any key to be changed. When a key is changed, the callback is fired with the path, the new value, and the old value.  "},{"title":"ObserveChange​","type":1,"pageTitle":"Replica","url":"/Replicator/api/Replica#ObserveChange","content":"&lt;/&gt; Replica:ObserveChange( Path: {string | number} | string, Callback: (...any) → nil ) → RBXScriptConnection  Observes a specific key and fires the callback with the value of the key. The callback is fired immediately and then whenever the key is changed.  "},{"title":"AddCleanupTask​","type":1,"pageTitle":"Replica","url":"/Replicator/api/Replica#AddCleanupTask","content":"&lt;/&gt; Replica:AddCleanupTask( Task: () → nil, CleanupMethod: string | boolean? ) → nil Adds a task to be cleaned when the replica is destroyed. If a method is provided it'll use this method to clean, otherwise it'll assume that it is a function or thread (true). "}]